import java.util.ArrayList;
import java.util.NoSuchElementException;

// Generic Queue class
class DynamicQueue<T> {
    private ArrayList<T> queue;

    // Constructor
    public DynamicQueue() {
        queue = new ArrayList<>();
    }

    // Add an element to the end of the queue
    public void enqueue(T item) {
        queue.add(item);
    }

    // Remove and return the front element
    public T dequeue() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty.");
        }
        return queue.remove(0);
    }

    // Peek at the front element without removing
    public T peek() {
        if (isEmpty()) {
            throw new NoSuchElementException("Queue is empty.");
        }
        return queue.get(0);
    }

    // Check if the queue is empty
    public boolean isEmpty() {
        return queue.isEmpty();
    }

    // Get the size of the queue
    public int size() {
        return queue.size();
    }

    // Display all elements in the queue
    public void display() {
        System.out.println("Queue elements: " + queue);
    }
}

// Main class to demonstrate functionality
public class GenericQueueDemo {
    public static void main(String[] args) {
        // Create a queue for Integer type
        DynamicQueue<Integer> intQueue = new DynamicQueue<>();
        intQueue.enqueue(10);
        intQueue.enqueue(20);
        intQueue.enqueue(30);
        intQueue.display();
        System.out.println("Dequeued: " + intQueue.dequeue());
        intQueue.display();

        // Create a queue for String type
        DynamicQueue<String> stringQueue = new DynamicQueue<>();
        stringQueue.enqueue("Apple");
        stringQueue.enqueue("Banana");
        stringQueue.display();
        System.out.println("Peek: " + stringQueue.peek());
    }
}
